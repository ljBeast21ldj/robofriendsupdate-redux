{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","Cardlist","robots","robotCards","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd556a82.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({ robots }) => {\r\n       const robotCards = robots.map((user, i) => {\r\n        return <Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} \r\n                />\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {robotCards}\r\n        </div>\r\n    ); \r\n    \r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = ' REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = ' REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = ' REQUEST_ROBOTS_FAILED';","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\ncomponentDidMount() {\n this.props.onRequestRobots();\n}\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n      return isPending ? \n      <h1 className=\"tc\">Loading</h1> : (\n      <div className='tc'>\n        <h1 className=\"f1\">RoboFriends</h1>\n\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <Cardlist robots={filteredRobots}/>\n        </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n    \r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING: \r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED: \r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}